---
title: "D√≠a de las Matem√°ticas + Manim"
subtitle: "Explorando la conexi√≥n entre las matem√°ticas y la visualizaci√≥n con Manim en Python"

author: "Francisco Alfaro"
date: "2025-03-14"
categories: [python, mathematics, visualization]
image: "images/manim2.png"
links:
- icon: medium
  icon_pack: fab
  name: Medium
  url: https://medium.com/@fralfaro/d%C3%ADa-de-las-matem%C3%A1ticas-manim-efd60a93f84f
filters:
   - lightbox
lightbox: auto
---

```{r}
#| echo: false
#| results: asis
source(here::here("R/utils.R"))
read_yaml_talks_pt()
```

------------------------------------------------------------------------


## Introducci√≥n al D√≠a de las Matem√°ticas

Cada 14 de marzo celebramos el **D√≠a Internacional de las Matem√°ticas**, tambi√©n conocido como el **D√≠a de Pi**, en honor al famoso n√∫mero irracional $\pi \approx 3.14159$. Este d√≠a nos invita a reflexionar sobre la importancia de las matem√°ticas en la vida cotidiana, en la ciencia y en la tecnolog√≠a.

Las matem√°ticas est√°n en todas partes: desde el dise√±o de algoritmos, pasando por la arquitectura, hasta el arte y la m√∫sica. Son una herramienta fundamental para entender y modelar el mundo. Este d√≠a busca no solo celebrar la belleza de las matem√°ticas, sino tambi√©n fomentar su aprendizaje y aplicaci√≥n en la resoluci√≥n de problemas del mundo real. 

Adem√°s, es una ocasi√≥n para promover la ense√±anza de las matem√°ticas de forma creativa y accesible, resaltando c√≥mo las nuevas tecnolog√≠as pueden facilitar el aprendizaje de conceptos complejos. Las matem√°ticas pueden ser desafiantes, pero tambi√©n fascinantes, y herramientas innovadoras permiten transformar la forma en que las ense√±amos y aprendemos.

Una de las formas m√°s fascinantes de explorar las matem√°ticas hoy en d√≠a es a trav√©s de la visualizaci√≥n, y para ello, Python nos ofrece una herramienta extraordinaria: **[Manim](https://docs.manim.community/en/stable/index.html)**.

---

## ¬øQu√© es Manim?

**Manim** (Mathematical Animation Engine) es una librer√≠a de Python creada para generar animaciones matem√°ticas de alta calidad. Permite visualizar conceptos abstractos, ecuaciones, gr√°ficos y transformaciones geom√©tricas de una manera clara y din√°mica.

üîπ **¬øPor qu√© usar Manim?**
- **Visualizaci√≥n clara**: Hace que conceptos complejos sean m√°s f√°ciles de comprender.
- **Automatizaci√≥n**: Puedes crear animaciones personalizadas programando en Python.
- **Calidad profesional**: Utilizada en v√≠deos educativos y presentaciones cient√≠ficas.

### Manim vs. otras herramientas
Existen varias herramientas de visualizaci√≥n matem√°tica como **GeoGebra**, **Desmos** y **Matplotlib**, que son ampliamente utilizadas en el √°mbito educativo y profesional. Sin embargo, **Manim** se diferencia al ofrecer:

- **Mayor flexibilidad**: Al ser una librer√≠a de Python, permite una personalizaci√≥n completa mediante programaci√≥n, adapt√°ndose a cualquier necesidad espec√≠fica.
- **Animaciones de alta calidad**: Ideal para la creaci√≥n de videos profesionales, presentaciones interactivas o materiales educativos avanzados.
- **Integraci√≥n con otras herramientas**: Facilita la integraci√≥n en flujos de trabajo automatizados o en proyectos m√°s complejos, como la creaci√≥n de cursos en l√≠nea o presentaciones din√°micas.
- **C√≥digo reproducible**: Permite documentar y versionar las visualizaciones de manera eficiente, algo esencial en entornos acad√©micos y cient√≠ficos.
- **Versatilidad**: Ideal tanto para peque√±as demostraciones matem√°ticas como para animaciones m√°s complejas y detalladas.

En comparaci√≥n, herramientas como GeoGebra son m√°s intuitivas para usuarios sin experiencia en programaci√≥n, pero ofrecen menos flexibilidad cuando se trata de crear animaciones personalizadas o integrarlas en sistemas automatizados.

Manim es ideal para estudiantes, profesores y divulgadores cient√≠ficos que deseen presentar ideas matem√°ticas de forma impactante y creativa, y representa una alternativa avanzada a herramientas tradicionales.


> üîó [Documentaci√≥n oficial de Manim](https://docs.manim.community/en/stable/index.html)

---

### Ejemplos de Visualizaci√≥n Matem√°tica con Manim

Para ilustrar el poder de Manim, veamos algunos ejemplos sencillos pero impactantes.

#### 1. **`BraceAnnotation`**: Anotaci√≥n con Llaves

```python
from manim import *

class BraceAnnotation(Scene):
    def construct(self):
        dot = Dot([-2, -1, 0])  # Crea el primer punto en las coordenadas (-2, -1)
        dot2 = Dot([2, 1, 0])   # Crea el segundo punto en las coordenadas (2, 1)
        
        # Crea una l√≠nea entre los dos puntos y le asigna el color naranja
        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)
        
        # Crea una llave (brace) en la direcci√≥n predeterminada (abajo de la l√≠nea)
        b1 = Brace(line)
        b1text = b1.get_text("Horizontal distance")  # Texto asociado a la primera llave
        
        # Crea otra llave perpendicular a la anterior (direcci√≥n rotada 90¬∞)
        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())
        b2text = b2.get_tex("x-x_1")  # Texto en formato LaTeX para la segunda llave
        
        # A√±ade los elementos a la escena
        self.add(line, dot, dot2, b1, b2, b1text, b2text)
```

- **¬øQu√© hace este c√≥digo?**
  - Dibuja dos puntos y una l√≠nea que los conecta.
  - A√±ade dos llaves (`Brace`):
    - La primera debajo de la l√≠nea, con la etiqueta "Horizontal distance".
    - La segunda en direcci√≥n perpendicular, con la f√≥rmula `x-x_1`.
  - Esto es √∫til para explicar visualmente distancias o diferencias en coordenadas.
  
<img src="images/img_11.png" alt="Imagen centrada" width="750" height="400">

---

#### 2. **`BooleanOperations`**: Operaciones Booleanas con Elipses

```python
from manim import *

class BooleanOperations(Scene):
    def construct(self):
        # Crea la primera elipse azul
        ellipse1 = Ellipse(width=4.0, height=5.0, fill_opacity=0.5, color=BLUE, stroke_width=10).move_to(LEFT)
        
        # Copia la primera elipse, la cambia a rojo y la mueve a la derecha
        ellipse2 = ellipse1.copy().set_color(color=RED).move_to(RIGHT)
        
        # T√≠tulo para la escena
        bool_ops_text = MarkupText("<u>Boolean Operation</u>").next_to(ellipse1, UP * 3)
        
        # Agrupa los objetos y los muestra con una animaci√≥n de entrada
        ellipse_group = Group(bool_ops_text, ellipse1, ellipse2).move_to(LEFT * 3)
        self.play(FadeIn(ellipse_group))

        # 1. Intersecci√≥n
        i = Intersection(ellipse1, ellipse2, color=GREEN, fill_opacity=0.5)
        self.play(i.animate.scale(0.25).move_to(RIGHT * 5 + UP * 2.5))
        intersection_text = Text("Intersection", font_size=23).next_to(i, UP)
        self.play(FadeIn(intersection_text))

        # 2. Uni√≥n
        u = Union(ellipse1, ellipse2, color=ORANGE, fill_opacity=0.5)
        union_text = Text("Union", font_size=23)
        self.play(u.animate.scale(0.3).next_to(i, DOWN, buff=union_text.height * 3))
        union_text.next_to(u, UP)
        self.play(FadeIn(union_text))

        # 3. Exclusi√≥n
        e = Exclusion(ellipse1, ellipse2, color=YELLOW, fill_opacity=0.5)
        exclusion_text = Text("Exclusion", font_size=23)
        self.play(e.animate.scale(0.3).next_to(u, DOWN, buff=exclusion_text.height * 3.5))
        exclusion_text.next_to(e, UP)
        self.play(FadeIn(exclusion_text))

        # 4. Diferencia
        d = Difference(ellipse1, ellipse2, color=PINK, fill_opacity=0.5)
        difference_text = Text("Difference", font_size=23)
        self.play(d.animate.scale(0.3).next_to(u, LEFT, buff=difference_text.height * 3.5))
        difference_text.next_to(d, UP)
        self.play(FadeIn(difference_text))
```

- **¬øQu√© hace este c√≥digo?**
  - Crea dos elipses superpuestas y muestra las principales operaciones booleanas sobre ellas:
    1. **Intersecci√≥n:** La zona com√∫n entre ambas elipses (verde).
    2. **Uni√≥n:** Toda la zona combinada de las dos elipses (naranja).
    3. **Exclusi√≥n:** Las √°reas que no son comunes (amarillo).
    4. **Diferencia:** La parte de una elipse sin la otra (rosado).
  - Cada operaci√≥n se presenta de forma animada y se acompa√±a de un texto descriptivo.

{{< video images/video2.mp4 >}}


---

#### 3. **`MovingFrameBox`**: Resaltando Partes de una F√≥rmula

```python
from manim import *

class MovingFrameBox(Scene):
    def construct(self):
        # F√≥rmula de la derivada del producto
        text=MathTex(
            "\\frac{d}{dx}f(x)g(x)=", "f(x)\\frac{d}{dx}g(x)", "+",
            "g(x)\\frac{d}{dx}f(x)"
        )
        self.play(Write(text))  # Escribe la f√≥rmula en pantalla
        
        # Crea un rect√°ngulo alrededor del primer t√©rmino
        framebox1 = SurroundingRectangle(text[1], buff = .1)
        # Crea un rect√°ngulo alrededor del segundo t√©rmino
        framebox2 = SurroundingRectangle(text[3], buff = .1)
        
        # Muestra el primer recuadro
        self.play(Create(framebox1))
        self.wait()
        
        # Transforma el primer recuadro en el segundo, movi√©ndolo
        self.play(ReplacementTransform(framebox1, framebox2))
        self.wait()
```

- **¬øQu√© hace este c√≥digo?**
  - Muestra la f√≥rmula de la derivada de un producto de funciones.
  - Resalta cada t√©rmino de la f√≥rmula con un cuadro animado:
    1. Primero, enmarca `f(x)\\frac{d}{dx}g(x)`.
    2. Luego, mueve el marco para destacar `g(x)\\frac{d}{dx}f(x)`.
  - Esto es √∫til para guiar visualmente al espectador sobre cu√°l t√©rmino est√° siendo explicado.


{{< video images/video1.mp4 >}}


## Conclusi√≥n

El D√≠a de las Matem√°ticas es una oportunidad perfecta para celebrar la belleza y la utilidad de esta disciplina. Herramientas como **Manim** permiten que conceptos complejos sean accesibles y fascinantes a trav√©s de visualizaciones interactivas.

‚úÖ **Beneficios de usar Manim:**
- Hace que las matem√°ticas sean m√°s atractivas y f√°ciles de entender.
- Permite crear contenido visual para clases, conferencias o videos educativos.
- Facilita la experimentaci√≥n y la creatividad en la ense√±anza y el aprendizaje.
- Ofrece m√°s personalizaci√≥n y control frente a otras herramientas visuales como GeoGebra.
- Promueve el pensamiento computacional, al combinar programaci√≥n y visualizaci√≥n matem√°tica.

Si te apasionan las matem√°ticas y la programaci√≥n, ¬°an√≠mate a explorar Manim y crea tus propias animaciones matem√°ticas! üöÄ

> üîó [Empieza con Manim aqu√≠](https://docs.manim.community/en/stable/tutorials.html)

